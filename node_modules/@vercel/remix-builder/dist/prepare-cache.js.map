{
  "version": 3,
  "sources": ["../src/prepare-cache.ts"],
  "sourcesContent": ["import { glob } from '@vercel/build-utils';\nimport { dirname, join, relative } from 'path';\nimport { _require, chdirAndReadConfig } from './utils';\nimport type { PrepareCache } from '@vercel/build-utils';\n\nexport const prepareCache: PrepareCache = async ({\n  entrypoint,\n  repoRootPath,\n  workPath,\n}) => {\n  const root = repoRootPath || workPath;\n  const mountpoint = dirname(entrypoint);\n  const entrypointFsDirname = join(workPath, mountpoint);\n  const packageJsonPath = join(entrypointFsDirname, 'package.json');\n  const remixRunDevPath = dirname(\n    _require.resolve('@remix-run/dev/package.json', {\n      paths: [entrypointFsDirname],\n    })\n  );\n  const remixConfig = await chdirAndReadConfig(\n    remixRunDevPath,\n    entrypointFsDirname,\n    packageJsonPath\n  );\n  const [nodeModulesFiles, cacheDirFiles] = await Promise.all([\n    // Cache `node_modules`\n    glob('**/node_modules/**', root),\n\n    // Cache the Remix \"cacheDirectory\" (typically `.cache`)\n    glob(relative(root, join(remixConfig.cacheDirectory, '**')), root),\n  ]);\n\n  return { ...nodeModulesFiles, ...cacheDirFiles };\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAqB;AACrB,kBAAwC;AACxC,mBAA6C;AAGtC,MAAM,eAA6B,OAAO;AAAA,EAC/C;AAAA,EACA;AAAA,EACA;AACF,MAAM;AACJ,QAAM,OAAO,gBAAgB;AAC7B,QAAM,iBAAa,qBAAQ,UAAU;AACrC,QAAM,0BAAsB,kBAAK,UAAU,UAAU;AACrD,QAAM,sBAAkB,kBAAK,qBAAqB,cAAc;AAChE,QAAM,sBAAkB;AAAA,IACtB,sBAAS,QAAQ,+BAA+B;AAAA,MAC9C,OAAO,CAAC,mBAAmB;AAAA,IAC7B,CAAC;AAAA,EACH;AACA,QAAM,cAAc,UAAM;AAAA,IACxB;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACA,QAAM,CAAC,kBAAkB,aAAa,IAAI,MAAM,QAAQ,IAAI;AAAA;AAAA,QAE1D,yBAAK,sBAAsB,IAAI;AAAA;AAAA,QAG/B,6BAAK,sBAAS,UAAM,kBAAK,YAAY,gBAAgB,IAAI,CAAC,GAAG,IAAI;AAAA,EACnE,CAAC;AAED,SAAO,EAAE,GAAG,kBAAkB,GAAG,cAAc;AACjD;",
  "names": []
}
