"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var prepare_cache_exports = {};
__export(prepare_cache_exports, {
  prepareCache: () => prepareCache
});
module.exports = __toCommonJS(prepare_cache_exports);
var import_build_utils = require("@vercel/build-utils");
var import_path = require("path");
var import_utils = require("./utils");
const prepareCache = async ({
  entrypoint,
  repoRootPath,
  workPath
}) => {
  const root = repoRootPath || workPath;
  const mountpoint = (0, import_path.dirname)(entrypoint);
  const entrypointFsDirname = (0, import_path.join)(workPath, mountpoint);
  const packageJsonPath = (0, import_path.join)(entrypointFsDirname, "package.json");
  const remixRunDevPath = (0, import_path.dirname)(
    import_utils._require.resolve("@remix-run/dev/package.json", {
      paths: [entrypointFsDirname]
    })
  );
  const remixConfig = await (0, import_utils.chdirAndReadConfig)(
    remixRunDevPath,
    entrypointFsDirname,
    packageJsonPath
  );
  const [nodeModulesFiles, cacheDirFiles] = await Promise.all([
    // Cache `node_modules`
    (0, import_build_utils.glob)("**/node_modules/**", root),
    // Cache the Remix "cacheDirectory" (typically `.cache`)
    (0, import_build_utils.glob)((0, import_path.relative)(root, (0, import_path.join)(remixConfig.cacheDirectory, "**")), root)
  ]);
  return { ...nodeModulesFiles, ...cacheDirFiles };
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  prepareCache
});
//# sourceMappingURL=prepare-cache.js.map
